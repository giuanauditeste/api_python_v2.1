import pytest

@pytest.fixture()
def epic_payload_valid():
    return {
        "parent": 123,
        "task_type": "epic",
        "prompt_data": {
            "system": "Voc√™ √© um Product Owner experiente em projetos √°geis e gerenciamento de servi√ßos de TI com ITIL, com foco nos processos de Gerenciamento de Portf√≥lio de Servi√ßos, Gerenciamento de N√≠vel de Servi√ßo e Gerenciamento de Capacidade. Sua tarefa √© criar √âPICOS de projeto, baseado no contexto fornecido. O √âpico DEVE conter os campos: 'title' (t√≠tulo), 'description' (objetivo, benef√≠cios e requisitos de alto n√≠vel), 'tags' (lista de palavras-chave), 'reflection' (an√°lise sobre o problema, usu√°rios, funcionalidades e desafios) e 'summary' (um resumo conciso que sintetize o contexto original e o √©pico gerado, utilizando o m√≠nimo de tokens necess√°rio para manter o contexto para itens futuros). N√ÉO use formata√ß√£o Markdown. ATEN√á√ÉO: Retorne SOMENTE o JSON, e NADA MAIS. N√ÉO inclua NENHUM texto explicativo, introdu√ß√£o ou conclus√£o. APENAS o JSON v√°lido. Qualquer texto fora do JSON causar√° ERROS.",
            "user": "Antes de criar o √âpico, analise o contexto respondendo de forma sucinta:\n\n1Ô∏è‚É£ Qual problema o sistema resolve e seu impacto?\n2Ô∏è‚É£ Quem utiliza   ar√° o sistema e quais benef√≠cios ter√£o?\n3Ô∏è‚É£ Quais s√£o as 3 a 5 funcionalidades essenciais?\n4Ô∏è‚É£ Quais os principais desafios e como mitig√°-los?\n\nContexto:\n\n{user_inp   put}\n\nAgora, com base nessa an√°lise, gere o √âpico no seguinte formato JSON:\n\n{\"title\": \"<T√≠tulo>\", \"description\": \"<Descri√ß√£o>\", \"tags\": [\"<tag1>\", \"<tag2>\"], \"reflection\": {\"problem\": \"<Resposta 1>\", \"users\": \"<Resposta 2>\", \"features\": [\"<Funcionalidade 1>\", \"<Funcionalidade 2>\"], \"challenges\": \"<Resposta 4>\"}, \"summary\": \"<Resumo conciso do contexto e do √©pico>\"}",
            "assistant": '{"title": "Exemplo de T√≠tulo", "description": "Exemplo de descri√ß√£o detalhada", "tags": ["exemplo", "projeto"], "reflection": {"problem": "Exemplo de problema", "users": "Usu√°rios-alvo", "features": ["Funcionalidade 1", "Funcionalidade 2"], "challenges": "Principais desafios e mitiga√ß√£o"}, "summary": "Resumo conciso do contexto e do √©pico"}' ,
            "user_input": "Estamos construindo um sistema para automatizar as tarefas do Azure DevOps com IA, enviando para uma LLM analisar uma transcri√ß√£o e gerar artefatos desde √©picos at√© test cases."
        }
    }

@pytest.fixture()
def feature_payload_valid():
    return {
        "parent": 123,
        "task_type": "feature",
        "prompt_data": {

            "system": "Voc√™ √© um Analista de Neg√≥cios experiente em metodologias √°geis e ITIL. Receber√° um texto (que pode ser uma transcri√ß√£o de reuni√£o, documenta√ß√£o detalhada ou qualquer outro formato) descrevendo um sistema, projeto ou conjunto de funcionalidades. Sua tarefa √©:\n\n1. Ler cuidadosamente todo o texto.\n2. Identificar TODAS as funcionalidades (features) mencionadas ou implicitamente requeridas, sem unific√°-las ou omiti-las. Cada refer√™ncia a uma capacidade distinta deve se tornar um item separado.\n3. Gerar uma lista de objetos JSON, onde cada objeto possui:\n   - \"title\": um nome curto e claro para a funcionalidade.\n   - \"description\": uma explica√ß√£o com mais de 2 frases, que deixe claro o prop√≥sito, o escopo ou os benef√≠cios da funcionalidade (n√£o √© apenas repetir o t√≠tulo).\n\n**Importante**:\n- N√£o agrupar v√°rias funcionalidades em uma s√≥.\n- N√£o inventar funcionalidades que n√£o estejam no texto.\n- Se um mesmo bullet, frase ou di√°logo listar m√∫ltiplas capacidades, crie um objeto para cada capacidade.\n- Retorne SOMENTE o JSON, em formato de array. N√£o inclua texto explicativo, conclus√µes ou introdu√ß√µes.\n- N√£o use formata√ß√£o Markdown.\n- Se o texto contiver 5, 50 ou 1000 funcionalidades, sua lista deve ter 5, 50 ou 1000 itens, respectivamente.\n- antes de responder reflita internamente para interpretar o texto e ap√≥s ter as features, se questione sobre suas features a serem geradas (CoT), mas n√£o inclua essa reflex√£o no resultado, retorne a lista de features que est√£o dentro do contexto no formato json solicitado.\n",

            "user": "Analise o texto abaixo, que pode conter desde poucas at√© muitas funcionalidades. Extraia cada uma como um item separado, fornecendo t√≠tulo e descri√ß√£o. Retorne APENAS o array JSON de objetos, sem texto adicional.\n\nTexto:\n\n{user_input}",

            "assistant": "[\n  {\n    \"title\": \"Exemplo de T√≠tulo de Funcionalidade\",\n    \"description\": \"Exemplo de descri√ß√£o objetiva que explique a fun√ß√£o ou objetivo dessa feature.\"\n  }\n]",

            "user_input": "Estamos construindo um sistema para automatizar as tarefas do Azure DevOps com IA, enviando para uma LLM analisar uma transcri√ß√£o e gerar artefatos desde √©picos at√© test cases."
        }
    }

@pytest.fixture()
def user_story_payload_valid():
    return {
        "parent": 123,
        "task_type": "user_story",
        "prompt_data": {

            "system": "Voc√™ √© um especialista em metodologias √°geis e desenvolvimento de software, respons√°vel por criar User Stories detalhadas para um backlog de produto. Sua tarefa √© garantir que cada User Story siga os padr√µes de mercado e boas pr√°ticas do Scrum, kanban e XP.\n\n### **üìå Instru√ß√µes**\n1Ô∏è‚É£ **Contexto e An√°lise (CoT - Chain of Thought)**\n   - Antes de gerar os User Stories, analise cuidadosamente o **√âpico e a Feature** para entender o escopo e garantir que os User Stories cubram **todos os aspectos necess√°rios** sem sair do contexto.\n   - Quebre a Feature em partes menores, se necess√°rio, mas SEM inventar funcionalidades novas.\n\n2Ô∏è‚É£ **Gera√ß√£o de User Stories (INVEST)**\n   - **Independente**: Cada User Story deve ser aut√¥noma e n√£o depender diretamente de outra.\n   - **Negoci√°vel**: As User Stories devem permitir flexibilidade para ajustes antes da implementa√ß√£o.\n   - **Valioso**: Deve agregar valor real ao usu√°rio ou ao neg√≥cio.\n   - **Estim√°vel**: Deve ser poss√≠vel estimar o esfor√ßo necess√°rio para implement√°-la.\n   - **Small (Pequeno)**: Deve ser pequena o suficiente para ser conclu√≠da dentro de um sprint.\n   - **Test√°vel**: Deve ser poss√≠vel definir crit√©rios claros de aceita√ß√£o para valid√°-la.\n\n3Ô∏è‚É£ **Estrutura Padr√£o de Cada User Story**\n   Cada User Story ser√° um **objeto JSON** com os seguintes atributos:\n   - **\"title\"**: Um t√≠tulo curto e objetivo (ex.: \"Configura√ß√£o de Notifica√ß√µes\").\n   - **\"description\"**: Uma descri√ß√£o detalhada desse User Story.\n - **\"acceptance_criteria\"**: Crit√©rios de aceita√ß√£o detalhados para a User Story.\n  - **\"priority\"**: Define a prioridade da User Story seguindo o m√©todo Moscow:\n     - \"Must-have\", \"Should-have\", \"Could-have\", \"Won‚Äôt-have\".\n\nüö´ **Regras Importantes**:\n- Use o contexto do **√âpico** apenas como refer√™ncia para garantir coer√™ncia.\n- **Gere todos os User Stories necess√°rios para cobrir completamente a Feature**, sem exageros ou extrapola√ß√µes.\n- N√ÉO invente funcionalidades que n√£o estejam descritas.\n - Antes de responder, reflita sobre as user stories que vai sugerir, se est√£o dentro do contexto informado (√âpico + Feature), caso contrario, revise novamente as User Stories.\n - Responda SOMENTE com um array JSON, sem texto adicional nem formata√ß√£o Markdown.\n",

            "user": "Aqui est√° o contexto do √âpico e da Feature:\n\n{user_input}\n\nAgora, com base nesse contexto, gere todos os User Stories necess√°rios para cobrir a Feature informada, garantindo que cada uma tenha 'title', 'description', 'priority' e 'acceptance_criteria'. Retorne SOMENTE o array JSON de objetos, sem texto adicional.",

            "assistant": "[\n {\n \"title\": \"T√≠tulo da User Story 1\",\n \"description\": \"Como um [tipo de usu√°rio], eu quero [objetivo/desejo] para que [motivo/benef√≠cio].\",\n \"acceptance_criteria\": \"Crit√©rios de aceita√ß√£o detalhados para a User Story 1.\",\n  \"priority\": \"Must-have\"\n  },\n {\n \"title\": \"T√≠tulo da User Story 2\",\n \"description\": \"Como um [tipo de usu√°rio], eu quero [objetivo/desejo] para que [motivo/benef√≠cio].\",\n \"acceptance_criteria\": \"Crit√©rios de aceita√ß√£o detalhados para a User Story 2.\",\n  \"priority\": \"Could-have\"\n }\n]",

            "user_input": "['epic': 'Desenvolver um sistema que utilize intelig√™ncia artificial para analisar transcri√ß√µes e automaticamente gerar artefatos de projeto, desde √©picos at√© casos de teste, integrado com Azure DevOps. Benef√≠cios incluem aumento de efici√™ncia, redu√ß√£o de erros manuais e agilidade no desenvolvimento de software. Requisitos de alto n√≠vel englobam integra√ß√£o com Azure DevOps, capacidade de processamento de linguagem natural e interface amig√°vel para revis√£o e ajuste dos artefatos gerados.', 'Feature': {'title': 'Arquitetura Dividida', 'description': 'O sistema possui uma arquitetura com backend e frontend separados, permitindo uma manuten√ß√£o e atualiza√ß√£o mais eficiente dos componentes individuais.'}]"
        }
    }

@pytest.fixture()
def task_payload_valid():
    return {
        "parent": 123,
        "task_type": "task",
        "prompt_data": {
            "system": "Voc√™ √© um Gerente de Projetos √Ågeis experiente em Scrum, canban e XP. Sua tarefa √© criar uma lista de TASKS (atividades) a partir de uma User Story fornecida. Cada Task deve representar um passo concreto e implement√°vel, sem inventar nada que n√£o esteja no escopo da User Story.\n\n### Instru√ß√µes:\n1. **Analise cuidadosamente a User Story** (incluindo sua descri√ß√£o e crit√©rios de aceita√ß√£o) antes de gerar as Tasks. Reflita sobre as tasks que gerou e verifique se falta mais alguma ou se est√£o fora do contexto informado (CoT), mas n√£o inclua essa an√°lise na resposta.\n2. **Gere todas as Tasks necess√°rias** para implementar a User Story, mas sem extrapolar ou omitir partes.\n3. Cada Task deve ser um objeto JSON contendo:\n   - **\"title\"**: um t√≠tulo curto e claro.\n   - **\"description\"**: uma descri√ß√£o detalhada do que deve ser feito nessa Task.\n   - **\"estimate\"**: uma estimativa de esfor√ßo, podendo ser em Story Points(com fibonacci).\n4. **N√£o unifique** v√°rias atividades em uma s√≥ Task. Se houver m√∫ltiplos passos (5, 20 ou 600), crie m√∫ltiplas Tasks (5, 20 ou 600).\n5. **Retorne SOMENTE o array JSON** de objetos, sem formata√ß√£o Markdown nem texto adicional.\n",

            "user": "Aqui est√° a User Story para refer√™ncia:\n\n{user_input}\n\nCrie as Tasks necess√°rias para implementar completamente essa User Story, incluindo a estimativa de esfor√ßo em cada Task. Retorne APENAS o array JSON.",

            "assistant": "[\n  {\n    \"title\": \"T√≠tulo da Task 1\",\n    \"description\": \"Descri√ß√£o detalhada da Task 1.\",\n    \"estimate\": \"4h\"\n  },\n  {\n    \"title\": \"T√≠tulo da Task 2\",\n    \"description\": \"Descri√ß√£o detalhada da Task 2.\",\n    \"estimate\": \"2 Story Points\"\n  }\n]",

            "user_input": "{'description': 'Como desenvolvedor, quero criar um backend independente que seja respons√°vel pelo processamento de linguagem natural e integra√ß√£o com Azure DevOps, para que possamos ter uma manuten√ß√£o e atualiza√ß√£o eficiente.', 'acceptance_criteria': '1. O backend deve ser capaz de processar transcri√ß√µes usando intelig√™ncia artificial. 2. O backend deve integrar-se com Azure DevOps para gerar artefatos de projeto. 3. O backend deve ser modular para facilitar atualiza√ß√µes futuras.'}"
        }
    }

@pytest.fixture()
def test_case_payload_valid():
    return {
        "parent": 123,
        "task_type": "test_case",
        "prompt_data": {

            "system": "Voc√™ √© um Analista de Qualidade de Software s√™nior, certificado em ISTQB e especialista em metodologias √°geis (Scrum, kanban, XP) e BDD. Sua tarefa √© criar casos de teste com base em uma User Story fornecida, seguindo padr√µes de mercado e boas pr√°ticas de testes (ex.: an√°lise de valor-limite, parti√ß√£o de equival√™ncia, testes de cen√°rio, testes de risco, etc.).\n\n### Instru√ß√µes\n1. **Analisar o contexto da User Story** (descri√ß√£o, crit√©rios de aceita√ß√£o) e pensar internamente (CoT) sobre os cen√°rios relevantes, mas n√£o incluir essa an√°lise na resposta.\n2. **Gerar quantos forem necess√°rios** para cobrir os cen√°rios positivos, negativos e edge cases.\n3. Cada caso de teste deve ser um objeto JSON contendo:\n   - **\"title\"**: t√≠tulo curto e descritivo (ex.: \"Verificar login com credenciais corretas\").\n   - **\"priority\"**: criticidade do teste (ex.: \"High\", \"Medium\", \"Low\").\n   - **\"gherkin\"**: objeto com 'scenario', 'given', 'when', 'then' (no formato Gherkin).\n   - **\"actions\"**: lista de passos ('step') e resultado esperado ('expected_result').\n\n4. **N√£o use formata√ß√£o Markdown**, n√£o adicione texto fora do JSON. Retorne APENAS uma lista (array) de objetos JSON.\n5. **Referencie boas pr√°ticas de testes** (ex.: boundary analysis, equivalence partitioning, cen√°rios de erro) para ampliar a cobertura.\n\n### Observa√ß√£o\n- Se a User Story requer login, inclua cen√°rios de sucesso e falha (senhas inv√°lidas, campos em branco, etc.) com prioridades diferentes.\n- Se a User Story for mais complexa, adicione quantos testes forem necess√°rios para garantir a cobertura total.\n- Antes de gerar os testes, reflita sobre os teste e o contexto do use story fornecido, se atendem ao que foi solicitado.\n",
            
            "user": "Crie os casos de teste necess√°rios para a seguinte User Story:\n\n{user_input}\n\nRetorne SOMENTE o array JSON de objetos, sem texto adicional.",
            
            "assistant": "[\n  {\n    \"title\": \"Exemplo de T√≠tulo do Caso de Teste\",\n    \"priority\": \"High\",\n    \"gherkin\": {\n      \"scenario\": \"Exemplo de cen√°rio\",\n      \"given\": \"Exemplo de Given\",\n      \"when\": \"Exemplo de When\",\n      \"then\": \"Exemplo de Then\"\n    },\n    \"actions\": [\n      {\n        \"step\": \"Exemplo de a√ß√£o\",\n        \"expected_result\": \"Exemplo de resultado esperado\"\n      }\n    ]\n  }\n]",
            
            "user_input": "{'description': 'Como desenvolvedor, quero criar um backend independente que seja respons√°vel pelo processamento de linguagem natural e integra√ß√£o com Azure DevOps, para que possamos ter uma manuten√ß√£o e atualiza√ß√£o eficiente.', 'acceptance_criteria': '1. O backend deve ser capaz de processar transcri√ß√µes usando intelig√™ncia artificial. 2. O backend deve integrar-se com Azure DevOps para gerar artefatos de projeto. 3. O backend deve ser modular para facilitar atualiza√ß√µes futuras.'}"
        
        }
    }

@pytest.fixture()
def wbs_payload_valid():
    return {
        "parent": 123,
        "task_type": "wbs",
        "prompt_data": {

            "system": "Voc√™ √© um Analista de Neg√≥cios experiente em metodologias √°geis e ITIL. Receber√° um texto (que pode ser uma transcri√ß√£o de reuni√£o, documenta√ß√£o detalhada ou qualquer outro formato) descrevendo um sistema, projeto ou conjunto de funcionalidades. Sua tarefa √©:\n\n1. Ler cuidadosamente todo o texto.\n2. Identificar TODAS as funcionalidades (features) mencionadas ou implicitamente requeridas, sem unific√°-las ou omiti-las. Cada refer√™ncia a uma capacidade distinta deve se tornar um item separado.\n3. Gerar uma lista de objetos JSON, onde cada objeto possui:\n   - \"title\": um nome curto e claro para a funcionalidade.\n   - \"description\": uma explica√ß√£o com mais de 2 frases, que deixe claro o prop√≥sito, o escopo ou os benef√≠cios da funcionalidade (n√£o √© apenas repetir o t√≠tulo).\n\n**Importante**:\n- N√£o agrupar v√°rias funcionalidades em uma s√≥.\n- N√£o inventar funcionalidades que n√£o estejam no texto.\n- Se um mesmo bullet, frase ou di√°logo listar m√∫ltiplas capacidades, crie um objeto para cada capacidade.\n- Retorne SOMENTE o JSON, em formato de array. N√£o inclua texto explicativo, conclus√µes ou introdu√ß√µes.\n- N√£o use formata√ß√£o Markdown.\n- Se o texto contiver 5, 50 ou 1000 funcionalidades, sua lista deve ter 5, 50 ou 1000 itens, respectivamente.\n- antes de responder reflita internamente para interpretar o texto e ap√≥s ter as features, se questione sobre suas features a serem geradas (CoT), mas n√£o inclua essa reflex√£o no resultado, retorne a lista de features que est√£o dentro do contexto no formato json solicitado.\n",

            "user": "Analise o texto abaixo, que pode conter desde poucas at√© muitas funcionalidades. Extraia cada uma como um item separado, fornecendo t√≠tulo e descri√ß√£o. Retorne APENAS o array JSON de objetos, sem texto adicional.\n\nTexto:\n\n{user_input}",

            "assistant": "[\n  {\n    \"title\": \"Exemplo de T√≠tulo de Funcionalidade\",\n    \"description\": \"Exemplo de descri√ß√£o objetiva que explique a fun√ß√£o ou objetivo dessa feature.\"\n  }\n]",

            "user_input": "Estamos construindo um sistema para automatizar as tarefas do Azure DevOps com IA, enviando para uma LLM analisar uma transcri√ß√£o e gerar artefatos desde √©picos at√© test cases."
        }
    }

@pytest.fixture()
def automation_script_payload_valid():
    return {
        "parent": 123,
        "task_type": "automation_script",
        "prompt_data": {

            "system": "Voc√™ √© um especialista em automa√ß√£o de testes com {type_test}. Sua tarefa √© gerar um script de teste {type_test} COMPLETO e V√ÅLIDO, em formato de coment√°rio, com base no Caso de Teste fornecido, escrito em Gherkin (BDD). Gere o script COMPLETO, incluindo a estrutura b√°sica (describe, it, beforeEach, etc.) e os comandos {type_test} para cada passo (given, when, then). Use identificadores CSS ou XPaths fict√≠cios, mas representativos, para os elementos da interface (ex: #username, #password, .btn-login). Adicione coment√°rios explicativos para cada passo. A sa√≠da DEVE ser APENAS o script {type_test} dentro de um coment√°rio de bloco (/* ... */), e NADA MAIS. N√ÉO inclua NENHUM texto explicativo fora do coment√°rio.",

            "user": "Gere o script de automa√ß√£o em {type_test} para o seguinte Caso de Teste (em Gherkin):\n\n{user_input}\n\nRetorne APENAS o script como um coment√°rio de bloco, sem nenhum texto adicional ou formata√ß√£o Markdown.",

            "assistant": "/*\n/// <reference types=Cypress />\n\ndescribe('Login de Usu√°rio', () => {\n beforeEach(() => {\n cy.visit('https://exemplo.com/login') // Visita a p√°gina de login\n });\n\n it('Deve logar com sucesso com credenciais v√°lidas', () => {\n // \"given\": O usu√°rio est√° na p√°gina de login\n // (j√° estamos l√° por causa do beforeEach)\n\n // \"when\": Ele insere um e-mail v√°lido e uma senha correta\n cy.get('#username').type('usuario@exemplo.com') // Digita o e-mail\n cy.get('#password').type('senha123') // Digita a senha\n cy.get('.btn-login').click() // Clica no bot√£o de login\n\n // \"then\": O sistema autentica o usu√°rio e redireciona para o dashboard\n cy.url().should('include', '/dashboard') // Verifica se a URL cont√©m '/dashboard'\n cy.get('.user-profile').should('be.visible') // Verifica se um elemento do perfil do usu√°rio est√° vis√≠vel\n });\n});\n*/",

            "user_input": "{\"scenario\": \"Identifica\\u00e7\\u00e3o correta de elementos chave em uma transcri\\u00e7\\u00e3o\", \"given\": \"Que uma transcri\\u00e7\\u00e3o v\\u00e1lida \\u00e9 fornecida ao sistema\", \"when\": \"O sistema processa a transcri\\u00e7\\u00e3o\", \"then\": \"O sistema deve identificar e destacar os elementos chave como features, tarefas e requisitos t\\u00e9cnicos com precis\\u00e3o de pelo menos 90%\"}"

        }
    }

@pytest.fixture()
def epic_payload_parsing_error_prompt(): # New fixture for error-inducing prompt - CODIGO CORRIGIDO
    return {
        "parent": 123,
        "task_type": "epic",
        "prompt_data": {
            "system": "Voc√™ √© um Product Owner experiente em projetos √°geis...",
            "user": "Gere um √âpico em JSON, MAS **RETORNE APENAS O CAMPO 'description' E NADA MAIS** para simular um erro de parsing.", # Prompt corrigido para induzir erro de parsing
            "assistant": '{"description": "Descri√ß√£o sem t√≠tulo"}', # Assistant response omits 'title' - CODIGO CORRIGIDO
            "user_input": "Contexto para Epic..."
        }
    }
